Here are all the methods provided by the itertools module in Python:

accumulate(iterable[, func, *, initial=None]): This makes an iterator that returns accumulated sums, or accumulated results of other binary functions.

combinations(iterable, r): This returns r length subsequences of elements from the input iterable.

combinations_with_replacement(iterable, r): This returns r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.
import itertools

# cycle
cycled = itertools.cycle('AB')  # Repeats the elements indefinitely: 'A', 'B', 'A', 'B', ...
print(next(cycled))  # Output: 'A'
print(next(cycled))  # Output: 'B'
print(next(cycled))  # Output: 'A'

# chain
chained = itertools.chain('ABC', 'DEF')  # Chains multiple iterables into a single iterable: 'A', 'B', 'C', 'D', 'E', 'F'
print(list(chained))  # Output: ['A', 'B', 'C', 'D', 'E', 'F']

# count
counter = itertools.count(start=10, step=3)  # Generates a sequence of numbers: 10, 13, 16, 19, ...
print(next(counter))  # Output: 10
print(next(counter))  # Output: 13

# dropwhile
dropped = itertools.dropwhile(lambda x: x<5, [1,4,6,4,1])  # Drops elements until the condition is False: 6, 4, 1
print(list(dropped))  # Output: [6, 4, 1]

# filterfalse
filtered = itertools.filterfalse(lambda x: x%2==0, range(10))  # Filters elements that do not satisfy the condition: 1, 3, 5, 7, 9
print(list(filtered))  # Output: [1, 3, 5, 7, 9]

# groupby
for key, group in itertools.groupby('AAAABBBCCDAABBB'):  # Groups consecutive elements based on a key: 'A', 'B', 'C', 'D', 'A', 'B'
    print(key, list(group))

# islice
sliced = itertools.islice('ABCDEFG', 2, None)  # Slices the iterable from a start index to the end: 'C', 'D', 'E', 'F', 'G'
print(list(sliced))  # Output: ['C', 'D', 'E', 'F', 'G']

# permutations
perms = itertools.permutations('ABCD', 2)  # Generates all possible permutations of length 2: ('A', 'B'), ('A', 'C'), ...
print(list(perms))  # Output: [('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'A'), ...]

# product
prod = itertools.product('ABCD', repeat=2)  # Generates the Cartesian product of multiple iterables: ('A', 'A'), ('A', 'B'), ...
print(list(prod))  # Output: [('A', 'A'), ('A', 'B'), ('A', 'C'), ('A', 'D'), ...]

# repeat
repeated = itertools.repeat('A', times=3)  # Repeats an element a specified number of times: 'A', 'A', 'A'
print(list(repeated))  # Output: ['A', 'A', 'A']

# starmap
mapped = itertools.starmap(pow, [(2,5), (3,2), (10,3)])  # Applies a function to each tuple of arguments: 32, 9, 1000
print(list(mapped))  # Output: [32, 9, 1000]

# takewhile
taken = itertools.takewhile(lambda x: x<5, [1,4,6,4,1])  # Takes elements until the condition is False: 1, 4
print(list(taken))  # Output: [1, 4]

# tee
it = iter('ABCD')
t1, t2 = itertools.tee(it)  # Splits an iterator into multiple independent iterators: 'A', 'B', 'C', 'D'
print(list(t1))  # Output: ['A', 'B', 'C', 'D']
print(list(t2))  # Output: ['A', 'B', 'C', 'D']

# zip_longest
zipped = itertools.zip_longest('ABCD', 'xy', fillvalue='-')  # Zips iterables together, filling missing values: ('A', 'x'), ('B', 'y'), ...
print(list(zipped))  # Output: [('A', 'x'), ('B', 'y'), ('C', '-'), ('D', '-')]